/* eslint-disable no-restricted-globals */
/*
// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== 'navigate') {
      return false;
    } // If this is a URL that starts with /_, skip.

    if (url.pathname.startsWith('/_')) {
      return false;
    } // If this looks like a URL for a resource, because it contains // a file extension, skip.

    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    } // Return true to signal that we want to use the handler.

    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
  // Add in any other file extensions or routing criteria as needed.
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure that once this runtime cache reaches a maximum size the
      // least-recently used images are removed.
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Any other custom service worker logic can go here.
*/
var appCacheFiles = [
  '/',
  '/index.html'
],
  // The name of the Cache Storage
  appCache = 'aws-amplify-v1';

/**
* The install event is fired when the service worker 
* is installed.
* https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
*/
addEventListener('install', (event) => {
  console.log('[Service Worker] Install Event', event)
  event.waitUntil(
    caches.open(appCache).then(function (cache) {
      return cache.addAll(appCacheFiles);
    })
  );
})

/**
* The activate vent is fired when the  service worker is activated
* and added to the home screen.
* https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
*/
addEventListener('activate', (event) => {
  console.log('[Service Worker] Activate Event ', event)
})

/**
* The fetch event is fired for every network request. It is also dependent
* on the scope of which your service worker was registered.
* https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
*/
addEventListener('fetch', function (event) {
  //return fetch(event.request);
  console.log('[Service Worker] Fetch: ', event);
  let url = new URL(event.request.url);
  //url.pathname
  event.respondWith(
    caches.match(event.request).then(function (resp) {
      return resp || fetch(event.request).then(function (response) {
        return caches.open(appCache).then(function (cache) {
          if (event.request.method === 'GET') {
            cache.put(event.request, response.clone());
          }
          return response;
        });
      });
    })
  );
});
/**
* The message will receive messages sent from the application.
* This can be useful for updating a service worker or messaging
* other clients (browser restrictions currently exist)
* https://developer.mozilla.org/en-US/docs/Web/API/Client/postMessage
*/
addEventListener('message', (event) => {
  console.log('[Service Worker] Message Event: ', event.data)
})

/**
* Listen for incoming Push events
*/
addEventListener('push', (event) => {
  console.log('[Service Worker] Push Received.');
  console.log(`[Service Worker] Push had this data: "${event.data.text()}"`);

  if (!(self.Notification && self.Notification.permission === 'granted'))
    return;

  var data = {};
  if (event.data)
    data = event.data.json();

  var title = data.title || "Web Push Notification";
  var message = data.message || "New Push Notification Received";
  var icon = "images/notification-icon.png";
  var badge = 'images/notification-badge.png';
  var options = {
    body: message,
    icon: icon,
    badge: badge
  };
  event.waitUntil(self.registration.showNotification(title, options));
});

/**
* Handle a notification click
*/
addEventListener('notificationclick', (event) => {
  console.log('[Service Worker] Notification click: ', event);
  event.notification.close();
  event.waitUntil(
    clients.openWindow('https://aws-amplify.github.io/amplify-js')
  );
});